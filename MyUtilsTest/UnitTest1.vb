Imports NUnit.Framework
Imports MyTest_VB.mytest_vb

Namespace MyUtilsTest

    Public Class Tests

        Dim utils As MyUtils = New MyUtils(True)

        ' ------ Helper functions ------ '

        Private Function test_ri_help(x As Int32, y As Int32) As Boolean
            Dim rslt As Int32 = utils.myTestRi(x, y)
            If (Math.Min(x, y) <= rslt) And (rslt <= Math.Max(x, y)) Then
                Return True
            Else
                Return False
            End If
        End Function

        Private Function test_rfr_help(num As Int32, denom As Int32) As Boolean
            Dim fr = utils.myTestRfr(num, denom)
            Dim numL As Int32 = Math.Floor(Math.Log(fr(0), 10)) + 1
            Dim denL As Int32 = Math.Floor(Math.Log(fr(1), 10)) + 1
            Return numL = num And denL = denom
        End Function

        Private Function test_rd_help(x As Int32, y As Int32, z As Int32) As Boolean
            Dim int_good As Boolean = False
            Dim dec_good As Boolean = False
            Dim rslt As Double = utils.myTestRd(x, y, z)
            Dim origx As Int32 = x
            Dim origy As Int32 = y

            'Dim tmp As Int32 = y
            'y = x
            'x = tmp
            Dim min As Int32 = Math.Min(x, y)
            Dim max As Int32 = Math.Max(x, y)
            If x = y Then
                If x < 0 Then
                    int_good = rslt >= x - 1 And rslt <= y
                Else
                    int_good = rslt >= x And rslt <= y + 1
                End If
            Else
                int_good = rslt <= max And rslt >= min
            End If
            If z = 0 Then
                dec_good = True
            Else
                z = Math.Abs(z)
                dec_good = Math.Abs(Math.Round(Math.Abs(rslt) - CInt(Math.Abs(rslt)), z)).ToString().Length - 2 = z
            End If
            If Not (int_good And dec_good) Then
                Dim a As Int32 = 4
            End If
            Return int_good And dec_good
        End Function

        Private Function notFixated(notUs As Int32(), func As Func(Of Int32, Int32, Boolean, Int32), ParamArray args As Object()) As Boolean
            Return utils.myLibRunFuncUntilNot(notUs, func, 250, args)
        End Function

        Private Function not_bookend_biased(func As Func(Of Int32, Int32, Boolean, Int32), ParamArray args As Object()) As Boolean
            Dim x As Int32 = args(0)
            Dim y As Int32 = args(1)
            If Math.Abs(x - y) > 1 And Math.Abs(y - x) > 1 Then
                Return utils.myLibRunFuncUntilNot(New Int32() {x, y}, func, 250, New Object() {x, y, True})
            End If
            Return True
        End Function

        Private Function not_bookend_biased(func As Func(Of Int32, Int32, Int32, Boolean, Double), ParamArray args As Object()) As Boolean
            Dim x As Int32 = args(0)
            Dim y As Int32 = args(1)
            Dim z As Int32 = args(2)
            If Math.Abs(x - y) > 1 And Math.Abs(y - x) > 1 Then
                'Return utils.myLibRunFuncUntilNot(New Int32() {x, y}, func, 250, New Object() {x, y, z, True})
            End If
            Return True
        End Function

        ' -------  Tests ------- '

        <Test>
        Public Sub test_ri()
            Assert.IsTrue(not_bookend_biased(AddressOf utils.myTestRi, 1, 1, True))
            Assert.IsTrue(not_bookend_biased(AddressOf utils.myTestRi, 5, 10, True))
            Assert.IsTrue(test_ri_help(1, 1))
            Assert.IsTrue(test_ri_help(-1, 1))
            Assert.IsTrue(test_ri_help(1, -1))
            Assert.IsTrue(test_ri_help(-1, -1))
            Assert.IsTrue(test_ri_help(0, 0))
            Assert.IsTrue(test_ri_help(1, 0))
            Assert.IsTrue(test_ri_help(-1, 0))
            Assert.IsTrue(test_ri_help(0, 1))
            Assert.IsTrue(test_ri_help(0, -1))
            Assert.IsTrue(test_ri_help(5, 5))
            Assert.IsTrue(test_ri_help(-5, 5))
            Assert.IsTrue(test_ri_help(5, -5))
            Assert.IsTrue(test_ri_help(-5, -5))
            Assert.IsTrue(test_ri_help(5, 0))
            Assert.IsTrue(test_ri_help(-5, 0))
            Assert.IsTrue(test_ri_help(0, 5))
            Assert.IsTrue(test_ri_help(0, -5))
            Assert.IsTrue(test_ri_help(6, 3))
            Assert.IsTrue(test_ri_help(-6, 3))
            Assert.IsTrue(test_ri_help(6, -3))
            Assert.IsTrue(test_ri_help(-6, -3))
            Assert.IsTrue(test_ri_help(3, 6))
            Assert.IsTrue(test_ri_help(-3, 6))
            Assert.IsTrue(test_ri_help(3, -6))
            Assert.IsTrue(test_ri_help(-3, -6))
            Assert.IsTrue(test_ri_help(10, 1))
            Assert.IsTrue(test_ri_help(100, 10))
            Assert.IsTrue(test_ri_help(1000, 100))
            Assert.IsTrue(test_ri_help(10000, 1000))
            Assert.IsTrue(test_ri_help(100000, 10000))
            Assert.IsTrue(test_ri_help(1000000, 100000))
            Assert.IsTrue(test_ri_help(-10, 10))
            Assert.IsTrue(test_ri_help(-100, 100))
            Assert.IsTrue(test_ri_help(-1000, 1000))
            Assert.IsTrue(test_ri_help(-10000, 10000))
            Assert.IsTrue(test_ri_help(-100000, 100000))
            Assert.IsTrue(test_ri_help(-1000000, 1000000))
            Assert.IsTrue(test_ri_help(10, -10))
            Assert.IsTrue(test_ri_help(100, -100))
            Assert.IsTrue(test_ri_help(1000, -1000))
            Assert.IsTrue(test_ri_help(10000, -10000))
            Assert.IsTrue(test_ri_help(100000, -100000))
            Assert.IsTrue(test_ri_help(1000000, -1000000))
            Assert.IsTrue(test_ri_help(-1, -10))
            Assert.IsTrue(test_ri_help(-10, -100))
            Assert.IsTrue(test_ri_help(-100, -1000))
            Assert.IsTrue(test_ri_help(-1000, -10000))
            Assert.IsTrue(test_ri_help(-10000, -100000))
            Assert.IsTrue(test_ri_help(-100000, -1000000))
            Assert.IsTrue(test_ri_help(-50000000, 1))
            Assert.IsTrue(test_ri_help(1, 50000000))
            Assert.IsTrue(test_ri_help(-50000000, 50000000))
        End Sub

        <Test>
        Public Sub test_rfr()
            Assert.IsTrue(test_rfr_help(2, 2))
            Assert.IsTrue(test_rfr_help(1, 1))
            Assert.IsTrue(test_rfr_help(1, 1))
            Assert.IsTrue(test_rfr_help(1, 2))
            Assert.IsTrue(test_rfr_help(1, 3))
            Assert.IsTrue(test_rfr_help(1, 4))
            Assert.IsTrue(test_rfr_help(1, 5))
            Assert.IsTrue(test_rfr_help(2, 1))
            Assert.IsTrue(test_rfr_help(3, 1))
            Assert.IsTrue(test_rfr_help(4, 1))
            Assert.IsTrue(test_rfr_help(5, 1))
            Assert.IsTrue(test_rfr_help(2, 3))
            Assert.IsTrue(test_rfr_help(2, 4))
            Assert.IsTrue(test_rfr_help(2, 5))
            Assert.IsTrue(test_rfr_help(2, 6))
            Assert.IsTrue(test_rfr_help(3, 2))
            Assert.IsTrue(test_rfr_help(4, 2))
            Assert.IsTrue(test_rfr_help(5, 2))
            Assert.IsTrue(test_rfr_help(6, 2))
            Assert.IsTrue(test_rfr_help(5, 6))
            Assert.IsTrue(test_rfr_help(5, 7))
            Assert.IsTrue(test_rfr_help(5, 8))
            Assert.IsTrue(test_rfr_help(5, 9))
            Assert.IsTrue(test_rfr_help(6, 5))
            Assert.IsTrue(test_rfr_help(7, 5))
            Assert.IsTrue(test_rfr_help(8, 5))
            Assert.IsTrue(test_rfr_help(9, 5))
        End Sub

        <Test>
        Public Sub test_rd()
            Assert.IsTrue(not_bookend_biased(AddressOf utils.myTestRd, 1, 1, 1))
            Assert.IsTrue(not_bookend_biased(AddressOf utils.myTestRd, 5, 10, 3))

            Assert.IsTrue(test_rd_help(1, 1, 0))
            Assert.IsTrue(test_rd_help(-1, 1, 0))
            Assert.IsTrue(test_rd_help(1, -1, 0))
            Assert.IsTrue(test_rd_help(-1, -1, 0))
            Assert.IsTrue(test_rd_help(0, 0, 0))
            Assert.IsTrue(test_rd_help(1, 0, 0))
            Assert.IsTrue(test_rd_help(-1, 0, 0))
            Assert.IsTrue(test_rd_help(0, 1, 0))
            Assert.IsTrue(test_rd_help(0, -1, 0))
            Assert.IsTrue(test_rd_help(5, 5, 0))
            Assert.IsTrue(test_rd_help(-5, 5, 0))
            Assert.IsTrue(test_rd_help(5, -5, 0))
            Assert.IsTrue(test_rd_help(-5, -5, 0))
            Assert.IsTrue(test_rd_help(5, 0, 0))
            Assert.IsTrue(test_rd_help(-5, 0, 0))
            Assert.IsTrue(test_rd_help(0, 5, 0))
            Assert.IsTrue(test_rd_help(0, -5, 0))
            Assert.IsTrue(test_rd_help(6, 3, 0))
            Assert.IsTrue(test_rd_help(-6, 3, 0))
            Assert.IsTrue(test_rd_help(6, -3, 0))
            Assert.IsTrue(test_rd_help(-6, -3, 0))
            Assert.IsTrue(test_rd_help(3, 6, 0))
            Assert.IsTrue(test_rd_help(-3, 6, 0))
            Assert.IsTrue(test_rd_help(3, -6, 0))
            Assert.IsTrue(test_rd_help(-3, -6, 0))
            Assert.IsTrue(test_rd_help(1, 1, 1))
            Assert.IsTrue(test_rd_help(-1, 1, 1))
            Assert.IsTrue(test_rd_help(1, -1, 1))
            Assert.IsTrue(test_rd_help(-1, -1, 1))
            Assert.IsTrue(test_rd_help(0, 0, 1))
            Assert.IsTrue(test_rd_help(1, 0, 1))
            Assert.IsTrue(test_rd_help(-1, 0, 1))
            Assert.IsTrue(test_rd_help(0, 1, 1))
            Assert.IsTrue(test_rd_help(0, -1, 1))
            Assert.IsTrue(test_rd_help(5, 5, 1))
            Assert.IsTrue(test_rd_help(-5, 5, 1))
            Assert.IsTrue(test_rd_help(5, -5, 1))
            Assert.IsTrue(test_rd_help(-5, -5, 1))
            Assert.IsTrue(test_rd_help(5, 0, 1))
            Assert.IsTrue(test_rd_help(-5, 0, 1))
            Assert.IsTrue(test_rd_help(0, 5, 1))
            Assert.IsTrue(test_rd_help(0, -5, 1))
            Assert.IsTrue(test_rd_help(6, 3, 1))
            Assert.IsTrue(test_rd_help(-6, 3, 1))
            Assert.IsTrue(test_rd_help(6, -3, 1))
            Assert.IsTrue(test_rd_help(-6, -3, 1))
            Assert.IsTrue(test_rd_help(3, 6, 1))
            Assert.IsTrue(test_rd_help(-3, 6, 1))
            Assert.IsTrue(test_rd_help(3, -6, 1))
            Assert.IsTrue(test_rd_help(-3, -6, 1))
            Assert.IsTrue(test_rd_help(1, 1, 4))
            Assert.IsTrue(test_rd_help(-1, 1, 4))
            Assert.IsTrue(test_rd_help(1, -1, 4))
            Assert.IsTrue(test_rd_help(-1, -1, 4))
            Assert.IsTrue(test_rd_help(0, 0, 4))
            Assert.IsTrue(test_rd_help(1, 0, 4))
            Assert.IsTrue(test_rd_help(-1, 0, 4))
            Assert.IsTrue(test_rd_help(0, 1, 4))
            Assert.IsTrue(test_rd_help(0, -1, 4))
            Assert.IsTrue(test_rd_help(5, 5, 4))
            Assert.IsTrue(test_rd_help(-5, 5, 4))
            Assert.IsTrue(test_rd_help(5, -5, 4))
            Assert.IsTrue(test_rd_help(-5, -5, 4))
            Assert.IsTrue(test_rd_help(5, 0, 4))
            Assert.IsTrue(test_rd_help(-5, 0, 4))
            Assert.IsTrue(test_rd_help(0, 5, 4))
            Assert.IsTrue(test_rd_help(0, -5, 4))
            Assert.IsTrue(test_rd_help(6, 3, 4))
            Assert.IsTrue(test_rd_help(-6, 3, 4))
            Assert.IsTrue(test_rd_help(6, -3, 4))
            Assert.IsTrue(test_rd_help(-6, -3, 4))
            Assert.IsTrue(test_rd_help(3, 6, 4))
            Assert.IsTrue(test_rd_help(-3, 6, 4))
            Assert.IsTrue(test_rd_help(3, -6, 4))
            Assert.IsTrue(test_rd_help(-3, -6, 4))
            Assert.IsTrue(test_rd_help(1, 1, -4))
            Assert.IsTrue(test_rd_help(-1, 1, -4))
            Assert.IsTrue(test_rd_help(1, -1, -4))
            Assert.IsTrue(test_rd_help(-1, -1, -4))
            Assert.IsTrue(test_rd_help(0, 0, -4))
            Assert.IsTrue(test_rd_help(1, 0, -4))
            Assert.IsTrue(test_rd_help(-1, 0, -4))
            Assert.IsTrue(test_rd_help(0, 1, -4))
            Assert.IsTrue(test_rd_help(0, -1, -4))
            Assert.IsTrue(test_rd_help(5, 5, -4))
            Assert.IsTrue(test_rd_help(-5, 5, -4))
            Assert.IsTrue(test_rd_help(5, -5, -4))
            Assert.IsTrue(test_rd_help(-5, -5, -4))
            Assert.IsTrue(test_rd_help(5, 0, -4))
            Assert.IsTrue(test_rd_help(-5, 0, -4))
            Assert.IsTrue(test_rd_help(0, 5, -4))
            Assert.IsTrue(test_rd_help(0, -5, -4))
            Assert.IsTrue(test_rd_help(6, 3, -4))
            Assert.IsTrue(test_rd_help(-6, 3, -4))
            Assert.IsTrue(test_rd_help(6, -3, -4))
            Assert.IsTrue(test_rd_help(-6, -3, -4))
            Assert.IsTrue(test_rd_help(3, 6, -4))
            Assert.IsTrue(test_rd_help(-3, 6, -4))
            Assert.IsTrue(test_rd_help(3, -6, -4))
            Assert.IsTrue(test_rd_help(-3, -6, -4))
            Assert.IsTrue(test_rd_help(10, 1, 0))
            Assert.IsTrue(test_rd_help(100, 10, 0))
            Assert.IsTrue(test_rd_help(1000, 100, 0))
            Assert.IsTrue(test_rd_help(10000, 1000, 0))
            Assert.IsTrue(test_rd_help(100000, 10000, 0))
            Assert.IsTrue(test_rd_help(1000000, 100000, 0))
            Assert.IsTrue(test_rd_help(-10, 10, 0))
            Assert.IsTrue(test_rd_help(-100, 100, 0))
            Assert.IsTrue(test_rd_help(-1000, 1000, 0))
            Assert.IsTrue(test_rd_help(-10000, 10000, 0))
            Assert.IsTrue(test_rd_help(-100000, 100000, 0))
            Assert.IsTrue(test_rd_help(-1000000, 1000000, 0))
            Assert.IsTrue(test_rd_help(10, -10, 0))
            Assert.IsTrue(test_rd_help(100, -100, 0))
            Assert.IsTrue(test_rd_help(1000, -1000, 0))
            Assert.IsTrue(test_rd_help(10000, -10000, 0))
            Assert.IsTrue(test_rd_help(100000, -100000, 0))
            Assert.IsTrue(test_rd_help(1000000, -1000000, 0))
            Assert.IsTrue(test_rd_help(-1, -10, 0))
            Assert.IsTrue(test_rd_help(-10, -100, 0))
            Assert.IsTrue(test_rd_help(-100, -1000, 0))
            Assert.IsTrue(test_rd_help(-1000, -10000, 0))
            Assert.IsTrue(test_rd_help(-10000, -100000, 0))
            Assert.IsTrue(test_rd_help(-100000, -1000000, 0))
            Assert.IsTrue(test_rd_help(10, 1, 1))
            Assert.IsTrue(test_rd_help(100, 10, 1))
            Assert.IsTrue(test_rd_help(1000, 100, 1))
            Assert.IsTrue(test_rd_help(10000, 1000, 1))
            Assert.IsTrue(test_rd_help(100000, 10000, 1))
            Assert.IsTrue(test_rd_help(1000000, 100000, 1))
            Assert.IsTrue(test_rd_help(-10, 10, 1))
            Assert.IsTrue(test_rd_help(-100, 100, 1))
            Assert.IsTrue(test_rd_help(-1000, 1000, 1))
            Assert.IsTrue(test_rd_help(-10000, 10000, 1))
            Assert.IsTrue(test_rd_help(-100000, 100000, 1))
            Assert.IsTrue(test_rd_help(-1000000, 1000000, 1))
            Assert.IsTrue(test_rd_help(10, -10, 1))
            Assert.IsTrue(test_rd_help(100, -100, 1))
            Assert.IsTrue(test_rd_help(1000, -1000, 1))
            Assert.IsTrue(test_rd_help(10000, -10000, 1))
            Assert.IsTrue(test_rd_help(100000, -100000, 1))
            Assert.IsTrue(test_rd_help(1000000, -1000000, 1))
            Assert.IsTrue(test_rd_help(-1, -10, 1))
            Assert.IsTrue(test_rd_help(-10, -100, 1))
            Assert.IsTrue(test_rd_help(-100, -1000, 1))
            Assert.IsTrue(test_rd_help(-1000, -10000, 1))
            Assert.IsTrue(test_rd_help(-10000, -100000, 1))
            Assert.IsTrue(test_rd_help(-100000, -1000000, 1))
            Assert.IsTrue(test_rd_help(10, 1, 4))
            Assert.IsTrue(test_rd_help(100, 10, 4))
            Assert.IsTrue(test_rd_help(1000, 100, 4))
            Assert.IsTrue(test_rd_help(10000, 1000, 4))
            Assert.IsTrue(test_rd_help(100000, 10000, 4))
            Assert.IsTrue(test_rd_help(1000000, 100000, 4))
            Assert.IsTrue(test_rd_help(-10, 10, 4))
            Assert.IsTrue(test_rd_help(-100, 100, 4))
            Assert.IsTrue(test_rd_help(-1000, 1000, 4))
            Assert.IsTrue(test_rd_help(-10000, 10000, 4))
            Assert.IsTrue(test_rd_help(-100000, 100000, 4))
            Assert.IsTrue(test_rd_help(-1000000, 1000000, 4))
            Assert.IsTrue(test_rd_help(10, -10, 4))
            Assert.IsTrue(test_rd_help(100, -100, 4))
            Assert.IsTrue(test_rd_help(1000, -1000, 4))
            Assert.IsTrue(test_rd_help(10000, -10000, 4))
            Assert.IsTrue(test_rd_help(100000, -100000, 4))
            Assert.IsTrue(test_rd_help(1000000, -1000000, 4))
            Assert.IsTrue(test_rd_help(-1, -10, 4))
            Assert.IsTrue(test_rd_help(-10, -100, 4))
            Assert.IsTrue(test_rd_help(-100, -1000, 4))
            Assert.IsTrue(test_rd_help(-1000, -10000, 4))
            Assert.IsTrue(test_rd_help(-10000, -100000, 4))
            Assert.IsTrue(test_rd_help(-100000, -1000000, 4))
        End Sub

        <Test>
        Public Sub test_is_prime()
            Assert.IsFalse(utils.myTestIsPrime(-1))
            Assert.IsFalse(utils.myTestIsPrime(0))
            Assert.IsFalse(utils.myTestIsPrime(1))
            Assert.IsTrue(utils.myTestIsPrime(2))
            Assert.IsTrue(utils.myTestIsPrime(3))
            Assert.IsFalse(utils.myTestIsPrime(4))
            Assert.IsTrue(utils.myTestIsPrime(5))
            Assert.IsFalse(utils.myTestIsPrime(6))
            Assert.IsTrue(utils.myTestIsPrime(7))
            Assert.IsFalse(utils.myTestIsPrime(8))
            Assert.IsFalse(utils.myTestIsPrime(9))
            Assert.IsFalse(utils.myTestIsPrime(10))
            Assert.IsTrue(utils.myTestIsPrime(11))
            Assert.IsFalse(utils.myTestIsPrime(12))
            Assert.IsTrue(utils.myTestIsPrime(13))
            Assert.IsFalse(utils.myTestIsPrime(14))
            Assert.IsFalse(utils.myTestIsPrime(15))
            Assert.IsFalse(utils.myTestIsPrime(16))
            Assert.IsTrue(utils.myTestIsPrime(17))
            Assert.IsFalse(utils.myTestIsPrime(18))
            Assert.IsTrue(utils.myTestIsPrime(19))
            Assert.IsFalse(utils.myTestIsPrime(20))
            Assert.IsFalse(utils.myTestIsPrime(21))
            Assert.IsFalse(utils.myTestIsPrime(22))
            Assert.IsTrue(utils.myTestIsPrime(23))
            Assert.IsTrue(utils.myTestIsPrime(31))
            Assert.IsFalse(utils.myTestIsPrime(33))
            Assert.IsTrue(utils.myTestIsPrime(37))
            Assert.IsTrue(utils.myTestIsPrime(41))
            Assert.IsTrue(utils.myTestIsPrime(43))
            Assert.IsTrue(utils.myTestIsPrime(47))
            Assert.IsFalse(utils.myTestIsPrime(51))
            Assert.IsTrue(utils.myTestIsPrime(53))
            Assert.IsFalse(utils.myTestIsPrime(57))
            Assert.IsTrue(utils.myTestIsPrime(61))
            Assert.IsFalse(utils.myTestIsPrime(63))
            Assert.IsTrue(utils.myTestIsPrime(67))
            Assert.IsTrue(utils.myTestIsPrime(71))
            Assert.IsTrue(utils.myTestIsPrime(73))
            Assert.IsFalse(utils.myTestIsPrime(77))
            Assert.IsFalse(utils.myTestIsPrime(81))
            Assert.IsTrue(utils.myTestIsPrime(83))
            Assert.IsFalse(utils.myTestIsPrime(87))
            Assert.IsFalse(utils.myTestIsPrime(91))
            Assert.IsFalse(utils.myTestIsPrime(93))
            Assert.IsTrue(utils.myTestIsPrime(97))
            Assert.IsTrue(utils.myTestIsPrime(101))
            Assert.IsTrue(utils.myTestIsPrime(103))
            Assert.IsTrue(utils.myTestIsPrime(107))
            Assert.IsTrue(utils.myTestIsPrime(151))
            Assert.IsFalse(utils.myTestIsPrime(153))
            Assert.IsTrue(utils.myTestIsPrime(157))
            Assert.IsFalse(utils.myTestIsPrime(501))
            Assert.IsTrue(utils.myTestIsPrime(503))
            Assert.IsFalse(utils.myTestIsPrime(507))
            Assert.IsFalse(utils.myTestIsPrime(1001))
            Assert.IsFalse(utils.myTestIsPrime(1003))
            Assert.IsFalse(utils.myTestIsPrime(1007))
            Assert.IsFalse(utils.myTestIsPrime(10001))
            Assert.IsFalse(utils.myTestIsPrime(10003))
            Assert.IsTrue(utils.myTestIsPrime(10007))
            Assert.IsFalse(utils.myTestIsPrime(100001))
            Assert.IsTrue(utils.myTestIsPrime(100003))
            Assert.IsFalse(utils.myTestIsPrime(100007))
            Assert.IsFalse(utils.myTestIsPrime(1000001))
            Assert.IsTrue(utils.myTestIsPrime(1000003))
            Assert.IsFalse(utils.myTestIsPrime(1000007))
        End Sub

        <Test>
        Public Sub test_prime_factors()
            Assert.IsTrue(utils.myTestPrimeFactors(-1).SequenceEqual(New Int32() {0}))
            Assert.IsTrue(utils.myTestPrimeFactors(0).SequenceEqual(New Int32() {0}))
            Assert.IsTrue(utils.myTestPrimeFactors(1).SequenceEqual(New Int32() {0}))
            Assert.IsTrue(utils.myTestPrimeFactors(2).SequenceEqual(New Int32() {2}))
            Assert.IsTrue(utils.myTestPrimeFactors(3).SequenceEqual(New Int32() {3}))
            Assert.IsTrue(utils.myTestPrimeFactors(4).SequenceEqual(New Int32() {2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(5).SequenceEqual(New Int32() {5}))
            Assert.IsTrue(utils.myTestPrimeFactors(6).SequenceEqual(New Int32() {2, 3}))
            Assert.IsTrue(utils.myTestPrimeFactors(7).SequenceEqual(New Int32() {7}))
            Assert.IsTrue(utils.myTestPrimeFactors(8).SequenceEqual(New Int32() {2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(9).SequenceEqual(New Int32() {3, 3}))
            Assert.IsTrue(utils.myTestPrimeFactors(10).SequenceEqual(New Int32() {2, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(11).SequenceEqual(New Int32() {11}))
            Assert.IsTrue(utils.myTestPrimeFactors(12).SequenceEqual(New Int32() {2, 2, 3}))
            Assert.IsTrue(utils.myTestPrimeFactors(13).SequenceEqual(New Int32() {13}))
            Assert.IsTrue(utils.myTestPrimeFactors(14).SequenceEqual(New Int32() {2, 7}))
            Assert.IsTrue(utils.myTestPrimeFactors(15).SequenceEqual(New Int32() {3, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(16).SequenceEqual(New Int32() {2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(17).SequenceEqual(New Int32() {17}))
            Assert.IsTrue(utils.myTestPrimeFactors(18).SequenceEqual(New Int32() {2, 3, 3}))
            Assert.IsTrue(utils.myTestPrimeFactors(19).SequenceEqual(New Int32() {19}))
            Assert.IsTrue(utils.myTestPrimeFactors(20).SequenceEqual(New Int32() {2, 2, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(30).SequenceEqual(New Int32() {2, 3, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(40).SequenceEqual(New Int32() {2, 2, 2, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(50).SequenceEqual(New Int32() {2, 5, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(60).SequenceEqual(New Int32() {2, 2, 3, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(70).SequenceEqual(New Int32() {2, 5, 7}))
            Assert.IsTrue(utils.myTestPrimeFactors(80).SequenceEqual(New Int32() {2, 2, 2, 2, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(90).SequenceEqual(New Int32() {2, 3, 3, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(100).SequenceEqual(New Int32() {2, 2, 5, 5}))
            Assert.IsTrue(utils.myTestPrimeFactors(4).SequenceEqual(New Int32() {2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(8).SequenceEqual(New Int32() {2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(16).SequenceEqual(New Int32() {2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(32).SequenceEqual(New Int32() {2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(64).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(128).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(512).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(1024).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(2048).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(4096).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(8192).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(16384).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(32768).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(65536).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(131072).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(262144).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
            Assert.IsTrue(utils.myTestPrimeFactors(524288).SequenceEqual(New Int32() {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}))
        End Sub

        <Test>
        Public Sub test_lcm()
            Assert.AreEqual(utils.myTestLcm(New Int32() {0}), 0)
            Assert.AreEqual(utils.myTestLcm(New Int32() {1}), 1)
            Assert.AreEqual(utils.myTestLcm(New Int32() {1, 2}), 2)
            Assert.AreEqual(utils.myTestLcm(New Int32() {1, 3, 2}), 6)
            Assert.AreEqual(utils.myTestLcm(New Int32() {3, 1, 2}), 6)
            Assert.AreEqual(utils.myTestLcm(New Int32() {3, 2, 1}), 6)
            Assert.AreEqual(utils.myTestLcm(New Int32() {2, 3, 4}), 12)
            Assert.AreEqual(utils.myTestLcm(New Int32() {2, 3, 4, 5}), 60)
            Assert.AreEqual(utils.myTestLcm(New Int32() {2, 3, 7}), 42)
            Assert.AreEqual(utils.myTestLcm(New Int32() {2, 4, 8}), 8)
            Assert.AreEqual(utils.myTestLcm(New Int32() {3, 6, 9}), 18)
            Assert.AreEqual(utils.myTestLcm(New Int32() {4, 16, 64}), 64)
            Assert.AreEqual(utils.myTestLcm(New Int32() {16, 4, 64}), 64)
            Assert.AreEqual(utils.myTestLcm(New Int32() {64, 16, 4}), 64)
            Assert.AreEqual(utils.myTestLcm(New Int32() {7, 49, 349}), 17101)
        End Sub

        <Test>
        Public Sub test_hcf()
            Assert.AreEqual(utils.myTestHcf(New Int32() {5, 15, 30}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {5, 30, 15}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {15, 5, 30}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {15, 30, 5}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {30, 5, 15}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {30, 15, 5}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {21, 35, 7}), 7)
            Assert.AreEqual(utils.myTestHcf(New Int32() {12, 24, 48}), 12)
            Assert.AreEqual(utils.myTestHcf(New Int32() {9, 27, 126}), 9)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-5, 15, 30}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {5, -15, 30}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {5, 15, -30}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-5, 30, 15}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-15, 5, 30}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-15, 30, 5}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-30, 5, 15}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-30, 15, 5}), 5)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-21, 35, 7}), 7)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-12, 24, 48}), 12)
            Assert.AreEqual(utils.myTestHcf(New Int32() {-9, 27, 126}), 9)
        End Sub

        <Test>
        Public Sub test_sq()
            Assert.AreEqual(utils.myLibSquare(0, 0), 0)
            CollectionAssert.Contains(New Int32() {0, 1}, utils.myLibSquare(0, 1))
            CollectionAssert.Contains(New Int32() {0, 1}, utils.myLibSquare(1, 0))
            CollectionAssert.Contains(New Int32() {0, 1}, utils.myLibSquare(-1, 0))
            CollectionAssert.Contains(New Int32() {-1, 0, 1}, utils.myLibSquare(-1, 1))
            Assert.AreEqual(utils.myLibSquare(1, 1), 1)
            CollectionAssert.Contains(New Int32() {0, 1, 4}, utils.myLibSquare(-2, 2))
            CollectionAssert.Contains(New Int32() {1, 4}, utils.myLibSquare(2, 2))
            CollectionAssert.Contains(New Int32() {1, 4}, utils.myLibSquare(1, 2))
            CollectionAssert.Contains(New Int32() {1, 4, 9}, utils.myLibSquare(1, 3))
            CollectionAssert.Contains(New Int32() {4, 9, 16, 25}, utils.myLibSquare(2, 5))
            CollectionAssert.Contains(New Int32() {25, 36, 49, 64, 81, 100}, utils.myLibSquare(5, 10))
            'Assert.IsTrue(notFixated(New Int32() {25}, AddressOf utils.myLibSquare, New Object() {5, 10}))
            'Assert.IsTrue(notFixated(New Int32() {26}, AddressOf utils.myLibSquare, New Object() {5, 10}))
            'Assert.IsTrue(notFixated(New Int32() {49}, AddressOf utils.myLibSquare, New Object() {5, 10}))
            'Assert.IsTrue(notFixated(New Int32() {64}, AddressOf utils.myLibSquare, New Object() {5, 10}))
            'Assert.IsTrue(notFixated(New Int32() {81}, AddressOf utils.myLibSquare, New Object() {5, 10}))
            'Assert.IsTrue(notFixated(New Int32() {100}, AddressOf utils.myLibSquare, New Object() {5, 10}))
        End Sub

        <Test>
        Public Sub test_is_square()
            Assert.IsFalse(utils.myLibIsSquare(-1))
            Assert.IsFalse(utils.myLibIsSquare(0))
            Assert.IsFalse(utils.myLibIsSquare(1))
            Assert.IsFalse(utils.myLibIsSquare(2))
            Assert.IsFalse(utils.myLibIsSquare(3))
            Assert.IsTrue(utils.myLibIsSquare(4))
            Assert.IsFalse(utils.myLibIsSquare(-4))
            Assert.IsFalse(utils.myLibIsSquare(5))
            Assert.IsFalse(utils.myLibIsSquare(6))
            Assert.IsFalse(utils.myLibIsSquare(7))
            Assert.IsFalse(utils.myLibIsSquare(8))
            Assert.IsTrue(utils.myLibIsSquare(9))
            Assert.IsFalse(utils.myLibIsSquare(-9))
            Assert.IsFalse(utils.myLibIsSquare(10))
            Assert.IsFalse(utils.myLibIsSquare(-10))
            Assert.IsFalse(utils.myLibIsSquare(11))
            Assert.IsFalse(utils.myLibIsSquare(12))
            Assert.IsFalse(utils.myLibIsSquare(13))
            Assert.IsFalse(utils.myLibIsSquare(14))
            Assert.IsFalse(utils.myLibIsSquare(15))
            Assert.IsTrue(utils.myLibIsSquare(16))
            Assert.IsFalse(utils.myLibIsSquare(17))
            Assert.IsFalse(utils.myLibIsSquare(18))
            Assert.IsFalse(utils.myLibIsSquare(19))
            Assert.IsFalse(utils.myLibIsSquare(20))
            Assert.IsTrue(utils.myLibIsSquare(25))
            Assert.IsFalse(utils.myLibIsSquare(26))
            Assert.IsFalse(utils.myLibIsSquare(35))
            Assert.IsTrue(utils.myLibIsSquare(36))
            Assert.IsFalse(utils.myLibIsSquare(37))
            Assert.IsFalse(utils.myLibIsSquare(48))
            Assert.IsTrue(utils.myLibIsSquare(49))
            Assert.IsFalse(utils.myLibIsSquare(50))
            Assert.IsFalse(utils.myLibIsSquare(51))
            Assert.IsFalse(utils.myLibIsSquare(53))
            Assert.IsTrue(utils.myLibIsSquare(64))
            Assert.IsFalse(utils.myLibIsSquare(65))
            Assert.IsFalse(utils.myLibIsSquare(168))
            Assert.IsTrue(utils.myLibIsSquare(169))
            Assert.IsFalse(utils.myLibIsSquare(170))
        End Sub

        <Test>
        Public Sub test_not_square()
            ' dependency schmendency
            'Assert.IsFalse( utils.myLibIsSquare( utils.myLibNotSquare( 0,   1 ) ) )
            'Assert.IsFalse( utils.myLibIsSquare( utils.myLibNotSquare( 1,   0 ) ) )
            'Assert.IsFalse( utils.myLibIsSquare( utils.myLibNotSquare( -1,   0 ) ) )
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(-1, 1)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(1, 1)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(-2, 2)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(2, 2)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(1, 2)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(1, 3)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(2, 5)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 10)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(-50, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(-50, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(-50, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(-50, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Assert.IsFalse(utils.myLibIsSquare(utils.myLibNotSquare(5, 100)))
            Dim rslt As Int32 = utils.myLibNotSquare(5, 100)
            'Assert.IsTrue(notFixated(New Int32() {rslt}, AddressOf utils.myLibNotSquare, New Object() {5, 100}))
            rslt = utils.myLibNotSquare(-5, 50)
            'Assert.IsTrue(notFixated(New Int32() {rslt}, AddressOf utils.myLibNotSquare, New Object() {-5, 50}))
            rslt = utils.myLibNotSquare(-5, 5)
            'Assert.IsTrue(notFixated(New Int32() {rslt}, AddressOf utils.myLibNotSquare, New Object() {-5, 5}))
        End Sub

        <Test>
        Public Sub test_int_choose()
            CollectionAssert.Contains(New Int32() {-1}, utils.myLibChoose(New Int32() {-1, -1}))
            CollectionAssert.Contains(New Int32() {-1, 1}, utils.myLibChoose(New Int32() {1, -1}))
            CollectionAssert.Contains(New Int32() {-1, 1}, utils.myLibChoose(New Int32() {-1, 1}))
            CollectionAssert.Contains(New Int32() {1}, utils.myLibChoose(New Int32() {1, 1}))
            CollectionAssert.Contains(New Int32() {0}, utils.myLibChoose(New Int32() {0, 0}))
            CollectionAssert.Contains(New Int32() {0, 1}, utils.myLibChoose(New Int32() {0, 1}))
            CollectionAssert.Contains(New Int32() {-1, 0}, utils.myLibChoose(New Int32() {0, -1}))
            CollectionAssert.Contains(New Int32() {0, 1}, utils.myLibChoose(New Int32() {1, 0}))
            CollectionAssert.Contains(New Int32() {-1, 0}, utils.myLibChoose(New Int32() {-1, 0}))
            CollectionAssert.Contains(New Int32() {10, 11, 12, 13, 14}, utils.myLibChoose(New Int32() {10, 11, 12, 13, 14}))
            CollectionAssert.Contains(New Int32() {100, 200, 300, 400, 500}, utils.myLibChoose(New Int32() {100, 200, 300, 400, 500}))
            CollectionAssert.Contains(New Double() {10, 10.1, 10.2, 10.3, 10.4}, utils.myLibChoose(New Double() {10, 10.1, 10.2, 10.3, 10.4}))
            CollectionAssert.Contains(New Int32() {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 8192, 16384, 32768, 65536},
                    utils.myLibChoose(New Int32() {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 8192, 16384, 32768, 65536}))
        End Sub

        <Test>
        Public Sub test_int_not()
            Assert.AreNotEqual(utils.myLibRunFuncUntilNot(New Int32() {0}, AddressOf utils.myTestRi, 250, New Object() {-1, 1, True}), 0)
            Assert.AreNotEqual(utils.myLibRunFuncUntilNot(New Int32() {5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}), 5)
            Assert.AreNotEqual(utils.myLibRunFuncUntilNot(New Int32() {5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}), 5)
            Assert.AreNotEqual(utils.myLibRunFuncUntilNot(New Int32() {5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}), 5)
            Assert.AreNotEqual(utils.myLibRunFuncUntilNot(New Int32() {5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}), 5)
            CollectionAssert.DoesNotContain(New Int32() {5, 6}, utils.myLibRunFuncUntilNot(New Int32() {5, 6}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {5, 6}, utils.myLibRunFuncUntilNot(New Int32() {5, 6}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {5, 6}, utils.myLibRunFuncUntilNot(New Int32() {5, 6}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {5, 6}, utils.myLibRunFuncUntilNot(New Int32() {5, 6}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {5, 6}, utils.myLibRunFuncUntilNot(New Int32() {5, 6}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {5, 6}, utils.myLibRunFuncUntilNot(New Int32() {5, 6}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {5, 6}, utils.myLibRunFuncUntilNot(New Int32() {5, 6}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {5}, utils.myLibRunFuncUntilNot(New Int32() {5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {4, 5}, utils.myLibRunFuncUntilNot(New Int32() {4, 5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {4, 5}, utils.myLibRunFuncUntilNot(New Int32() {4, 5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {4, 5}, utils.myLibRunFuncUntilNot(New Int32() {4, 5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
            CollectionAssert.DoesNotContain(New Int32() {4, 5}, utils.myLibRunFuncUntilNot(New Int32() {4, 5}, AddressOf utils.myTestRi, 250, New Object() {4, 6, True}))
        End Sub

        <Test>
        Public Sub test_significant_figures()
            Assert.AreEqual(utils.myLibSignificantFigures(0.0, 1), 0)
            Assert.AreEqual(utils.myLibSignificantFigures(1.0, 1), 1)
            Assert.AreEqual(utils.myLibSignificantFigures(1.1, 1), 1)
            Assert.AreEqual(utils.myLibSignificantFigures(11.0, 1), 10)
            Assert.AreEqual(utils.myLibSignificantFigures(111.0, 2), 110)
            Assert.AreEqual(utils.myLibSignificantFigures(1111.0, 3), 1110)
            Assert.AreEqual(utils.myLibSignificantFigures(11.1, 1), 10)
            Assert.AreEqual(utils.myLibSignificantFigures(11.11, 2), 11)
            Assert.AreEqual(utils.myLibSignificantFigures(11.111, 3), 11.1, 0.00001)
            Assert.AreEqual(utils.myLibSignificantFigures(11.1111, 4), 11.11)
            Assert.AreEqual(utils.myLibSignificantFigures(0.1, 1), 0.1)
            Assert.AreEqual(utils.myLibSignificantFigures(0.01, 1), 0.01)
            Assert.AreEqual(utils.myLibSignificantFigures(0.001, 1), 0.001)
            Assert.AreEqual(utils.myLibSignificantFigures(0.0001, 1), 0.0001)
            Assert.AreEqual(utils.myLibSignificantFigures(-1.0, 1), -1)
            Assert.AreEqual(utils.myLibSignificantFigures(-1.1, 1), -1)
            Assert.AreEqual(utils.myLibSignificantFigures(-11.0, 1), -10)
            Assert.AreEqual(utils.myLibSignificantFigures(-111.0, 2), -110)
            Assert.AreEqual(utils.myLibSignificantFigures(-1111.0, 3), -1110)
            Assert.AreEqual(utils.myLibSignificantFigures(-11.1, 1), -10)
            Assert.AreEqual(utils.myLibSignificantFigures(-11.11, 2), -11)
            Assert.AreEqual(utils.myLibSignificantFigures(-11.111, 3), -11.1, 0.00001)
            Assert.AreEqual(utils.myLibSignificantFigures(-11.1111, 4), -11.11)
            Assert.AreEqual(utils.myLibSignificantFigures(-0.1, 1), -0.1)
            Assert.AreEqual(utils.myLibSignificantFigures(-0.01, 1), -0.01)
            Assert.AreEqual(utils.myLibSignificantFigures(-0.001, 1), -0.001)
            Assert.AreEqual(utils.myLibSignificantFigures(-0.0001, 1), -0.0001)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 1), 10000)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 2), 12000)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 3), 12300)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 4), 12350)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 5), 12345)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 6), 12345.1)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 7), 12345.12)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 8), 12345.123)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 9), 12345.1235)
            Assert.AreEqual(utils.myLibSignificantFigures(12345.12345, 10), 12345.12345, 0.00001)
            Assert.AreEqual(utils.myLibSignificantFigures(123.123, 8), 123.123)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 1), -10000)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 2), -12000)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 3), -12300)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 4), -12350)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 5), -12345)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 6), -12345.1)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 7), -12345.12)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 8), -12345.123)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 9), -12345.1235)
            Assert.AreEqual(utils.myLibSignificantFigures(-12345.12345, 10), -12345.12345, 0.00001)
            Assert.AreEqual(utils.myLibSignificantFigures(-123.123, 8), -123.123)
        End Sub

        '[TestMethod]
        '<Test>
        Public Sub test_to_sub()
            ' Assert.Equals(Utils.mylib_to_sub("ABCpublic void GHIJKLMNOPQRSTUVWXYZabcpublic void ghijklmnopqrstuvwxyz0123456789+-=()"), \
            '                               "ₐ₈CDₑբ₉ₕᵢⱼₖₗₘₙₒₚQᵣₛₜᵤᵥwₓᵧZₐ♭꜀ᑯₑբ₉ₕᵢⱼₖₗₘₙₒₚ૧ᵣₛₜᵤᵥwₓᵧ₂₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎")
            Assert.AreEqual(utils.myLibToSub("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"),
            "ₐ₈CDₑբ₉ₕᵢⱼₖₗₘₙₒₚQᵣₛₜᵤᵥwₓᵧZₐ♭꜀ᑯₑբ₉ₕᵢⱼₖₗₘₙₒₚ૧ᵣₛₜᵤᵥwₓᵧ₂₀₁₂₃₄₅₆₇₈₉")
        End Sub

        '[TestMethod]
        '<Test>
        Public Sub test_to_super()
            'Assert.Equals(Utils.mylib_to_super("ABCpublic void GHIJKLMNOPQRSTUVWXYZabcpublic void ghijklmnopqrstuvwxyz0123456789+-=()"), \
            '                             "ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾQᴿˢᵀᵁⱽᵂˣʸᶻᵃᵇᶜᵈᵉᶠᵍʰᶦʲᵏˡᵐⁿᵒᵖ۹ʳˢᵗᵘᵛʷˣʸᶻ⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾")
            Assert.AreEqual(utils.myLibToSup("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"),
            "ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾQᴿˢᵀᵁⱽᵂˣʸᶻᵃᵇᶜᵈᵉᶠᵍʰᶦʲᵏˡᵐⁿᵒᵖ۹ʳˢᵗᵘᵛʷˣʸᶻ⁰¹²³⁴⁵⁶⁷⁸⁹")
        End Sub

        <Test>
        Public Sub test_to_standard_form()
            Assert.AreEqual(utils.myLibToStandardForm(111.11), "1.1111*10⁻²")
            Assert.AreEqual(utils.myLibToStandardForm(0.11111), "1.1111*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(-0.11111), "-1.1111*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(0), "0")
            Assert.AreEqual(utils.myLibToStandardForm(1), "1")
            Assert.AreEqual(utils.myLibToStandardForm(-1), "-1")
            Assert.AreEqual(utils.myLibToStandardForm(0.00012345), "1.2345*10⁴") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.0012345), "1.2345*10³") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.012345), "1.2345*10²") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.12345), "1.2345*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(1.2345), "1.2345")
            Assert.AreEqual(utils.myLibToStandardForm(12.345), "1.2345*10⁻¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(123.45), "1.2345*10⁻²") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(1234.5), "1.2345*10⁻³") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(12345.0), "1.2345*10⁻⁴") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-111.11), "-1.1111*10⁻²")
            Assert.AreEqual(utils.myLibToStandardForm(-0.11111), "-1.1111*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(-0.00012345), "-1.2345*10⁴") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.0012345), "-1.2345*10³") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.012345), "-1.2345*10²") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.12345), "-1.2345*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-1.2345), "-1.2345")
            Assert.AreEqual(utils.myLibToStandardForm(-12.345), "-1.2345*10⁻¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-123.45), "-1.2345*10⁻²") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-1234.5), "-1.2345*10⁻³") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-12345.0), "-1.2345*10⁻⁴") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(9.9), "9.9")
            Assert.AreEqual(utils.myLibToStandardForm(-9.9), "-9.9")
            Assert.AreEqual(utils.myLibToStandardForm(10), "1.0*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(10.0), "1.0*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(-10), "-1.0*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(-10.0), "-1.0*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(10.01), "1.001*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(-10.01), "-1.001*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(11), "1.1*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(11.0), "1.1*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(-11), "-1.1*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(-11.0), "-1.1*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(11.01), "1.101*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(-11.01), "-1.101*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(0.9), "9*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(0.09), "9*10²")
            Assert.AreEqual(utils.myLibToStandardForm(0.009), "9*10³")
            Assert.AreEqual(utils.myLibToStandardForm(0.0009), "9*10⁴")
            Assert.AreEqual(utils.myLibToStandardForm(0.00009), "9.0*10⁵") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.9), "-9*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(-0.09), "-9*10²")
            Assert.AreEqual(utils.myLibToStandardForm(-0.009), "-9*10³")
            Assert.AreEqual(utils.myLibToStandardForm(-0.0009), "-9*10⁴")
            Assert.AreEqual(utils.myLibToStandardForm(-0.00009), "-9.0*10⁵") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(5), "5")
            Assert.AreEqual(utils.myLibToStandardForm(55), "5.5*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(555), "5.55*10⁻²")
            Assert.AreEqual(utils.myLibToStandardForm(5555), "5.555*10⁻³")
            Assert.AreEqual(utils.myLibToStandardForm(55555), "5.5555*10⁻⁴") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(555555), "5.55555*10⁻⁵") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(5555555), "5.555555*10⁻⁶") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(55555555), "5.5555555*10⁻⁷") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(555555555), "5.55555555*10⁻⁸") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-5), "-5")
            Assert.AreEqual(utils.myLibToStandardForm(-55), "-5.5*10⁻¹")
            Assert.AreEqual(utils.myLibToStandardForm(-555), "-5.55*10⁻²")
            Assert.AreEqual(utils.myLibToStandardForm(-5555), "-5.555*10⁻³")
            Assert.AreEqual(utils.myLibToStandardForm(-55555), "-5.5555*10⁻⁴") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-555555), "-5.55555*10⁻⁵") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-5555555), "-5.555555*10⁻⁶") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-55555555), "-5.5555555*10⁻⁷") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-555555555), "-5.55555555*10⁻⁸") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.5), "5*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(0.55), "5.5*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(0.555), "5.55*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.5555), "5.555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.55555), "5.5555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.555555), "5.55555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.5555555), "5.555555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.55555556), "5.5555556*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(0.555555555), "5.55555555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.5), "-5*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(-0.55), "-5.5*10¹")
            Assert.AreEqual(utils.myLibToStandardForm(-0.555), "-5.55*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.5555), "-5.555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.55555), "-5.5555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.555555), "-5.55555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.5555555), "-5.555555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.55555555), "-5.5555555*10¹") ', 0.00000000001)
            Assert.AreEqual(utils.myLibToStandardForm(-0.555555555), "-5.55555555*10¹") ', 0.00000000001)
        End Sub
    End Class

End Namespace